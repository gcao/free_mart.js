// Generated by CoffeeScript 1.4.0
(function() {
  var FuzzyRegistry, HashRegistry, InUse, NOT_FOUND, NO_PROVIDER, Provider, Registry, isDeferred, toString,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty;

  NOT_FOUND = {};

  NO_PROVIDER = {};

  toString = function() {
    var obj, result;
    obj = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    result = JSON.stringify(obj).replace(/"/g, "'");
    return result.substring(1, result.length - 1);
  };

  isDeferred = function(o) {
    return typeof (o != null ? o.promise : void 0) === 'function';
  };

  InUse = {
    process: function() {
      var args, key, options;
      key = arguments[0], options = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      FreeMart.log("InUse.process(" + (toString.apply(null, [key, options].concat(__slice.call(args)))) + ")");
      try {
        this.in_use_keys.push(key);
        return this.process_.apply(this, [key, options].concat(__slice.call(args)));
      } finally {
        this.in_use_keys.splice(this.in_use_keys.indexOf(key), 1);
      }
    },
    processing: function(key) {
      return this.in_use_keys.indexOf(key) >= 0;
    }
  };

  Registry = (function() {

    function Registry() {
      this.storage = [];
    }

    Registry.prototype.clear = function() {
      return this.storage = [];
    };

    Registry.prototype.add = function(key, provider) {
      var child_registry, last;
      last = this.storage.length > 0 ? this.storage[this.storage.length - 1] : void 0;
      if (last instanceof HashRegistry && !last.accept(key)) {
        last[key] = provider;
      } else {
        if (typeof key === 'string') {
          child_registry = new HashRegistry();
          child_registry[key] = provider;
        } else {
          child_registry = new FuzzyRegistry(key, provider);
        }
        this.storage.push(child_registry);
      }
      return provider;
    };

    Registry.prototype.accept = function(key) {
      var item, _i, _len, _ref;
      _ref = this.storage;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (item.accept(key)) {
          return true;
        }
      }
    };

    Registry.prototype.process = function() {
      var args, i, item, key, options, processed, result, value, _i, _j, _len, _ref, _ref1;
      key = arguments[0], options = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      FreeMart.log("Registry.process(" + (toString.apply(null, [key, options].concat(__slice.call(args)))) + ")");
      if (this.storage.length === 0) {
        return NO_PROVIDER;
      }
      if (options.all) {
        result = [];
        processed = false;
        _ref = this.storage;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          if (!item.accept(key)) {
            continue;
          }
          if (item.processing(key)) {
            continue;
          }
          processed = true;
          value = item.process.apply(item, [key, options].concat(__slice.call(args)));
          if (value !== NOT_FOUND) {
            result.push(value);
          }
        }
        if (processed) {
          return result;
        } else {
          return NO_PROVIDER;
        }
      } else {
        processed = false;
        for (i = _j = _ref1 = this.storage.length - 1; _ref1 <= 0 ? _j <= 0 : _j >= 0; i = _ref1 <= 0 ? ++_j : --_j) {
          item = this.storage[i];
          if (!item.accept(key)) {
            continue;
          }
          if (item.processing(key)) {
            continue;
          }
          processed = true;
          result = item.process.apply(item, [key, options].concat(__slice.call(args)));
          if (result !== NOT_FOUND) {
            return result;
          }
        }
        if (processed) {
          return NOT_FOUND;
        } else {
          return NO_PROVIDER;
        }
      }
    };

    return Registry;

  })();

  HashRegistry = (function() {
    var key, value;

    for (key in InUse) {
      if (!__hasProp.call(InUse, key)) continue;
      value = InUse[key];
      HashRegistry.prototype[key] = value;
    }

    function HashRegistry() {
      this.in_use_keys = [];
    }

    HashRegistry.prototype.accept = function(key) {
      return this[key];
    };

    HashRegistry.prototype.process_ = function() {
      var args, key, options, provider;
      key = arguments[0], options = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      FreeMart.log("HashRegistry.process_(" + (toString.apply(null, [key, options].concat(__slice.call(args)))) + ")");
      provider = this[key];
      if (!provider) {
        return NO_PROVIDER;
      }
      return provider.process.apply(provider, [options].concat(__slice.call(args)));
    };

    return HashRegistry;

  })();

  FuzzyRegistry = (function() {
    var key, value;

    for (key in InUse) {
      if (!__hasProp.call(InUse, key)) continue;
      value = InUse[key];
      FuzzyRegistry.prototype[key] = value;
    }

    function FuzzyRegistry(fuzzy_key, provider) {
      this.fuzzy_key = fuzzy_key;
      this.provider = provider;
      this.in_use_keys = [];
    }

    FuzzyRegistry.prototype.accept = function(key) {
      var item, _i, _len, _ref;
      FreeMart.log("FuzzyRegistry.accept(" + key + ")");
      if (this.fuzzy_key instanceof RegExp) {
        return key.match(this.fuzzy_key);
      } else if (this.fuzzy_key instanceof Array) {
        _ref = this.fuzzy_key;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          if (item instanceof String) {
            if (item === key) {
              return true;
            }
          } else {
            if (key.match(item)) {
              return true;
            }
          }
        }
      }
    };

    FuzzyRegistry.prototype.process_ = function() {
      var args, key, options, _ref;
      key = arguments[0], options = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      FreeMart.log("FuzzyRegistry.process_(" + (toString.apply(null, [key, options].concat(__slice.call(args)))) + ")");
      if (!this.accept(key)) {
        return NO_PROVIDER;
      }
      return (_ref = this.provider).process.apply(_ref, [options].concat(__slice.call(args)));
    };

    return FuzzyRegistry;

  })();

  Provider = (function() {

    function Provider(key, value) {
      this.key = key;
      this.value = value;
      FreeMart.log("Provider.constructor(" + (toString(this.key, this.value)) + ")");
    }

    Provider.prototype.process = function() {
      var args, options, result;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      FreeMart.log("Provider.process(" + (toString.apply(null, args)) + ")");
      result = typeof this.value === 'function' ? this.value.apply(this, args) : this.value;
      options = args[0];
      if (options != null ? options.async : void 0) {
        if (isDeferred(result)) {
          return result;
        } else {
          return new Deferred().resolve(result);
        }
      } else {
        return result;
      }
    };

    return Provider;

  })();

  this.FreeMart = (function() {
    var createDeferredRequest, queues, registry;

    function FreeMart() {}

    queues = {};

    registry = new Registry();

    FreeMart.register = function(key, value) {
      var func, request, result, _i, _len, _ref;
      FreeMart.log("FreeMart.register(" + (toString(key, value)) + ")");
      registry.add(key, new Provider(key, value));
      if (queues[key]) {
        _ref = queues[key];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          request = _ref[_i];
          FreeMart.log("Deferred request: " + (toString.apply(null, [key].concat(__slice.call(request.args)))));
          result = registry.process.apply(registry, [key, {
            async: true
          }].concat(__slice.call(request.args)));
          FreeMart.log("Deferred request result: " + (toString(result)));
          if (result === NOT_FOUND) {
            throw "NOT FOUND: " + key;
          } else if (isDeferred(result)) {
            func = function(req) {
              return result.then(function(v) {
                return req.resolve(v);
              });
            };
            func(request);
          } else {
            request.resolve(result);
          }
        }
        return delete queues[key];
      }
    };

    FreeMart.request = function() {
      var args, key;
      key = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      FreeMart.log("FreeMart.request(" + (toString.apply(null, [key].concat(__slice.call(args)))) + ")");
      return registry.process.apply(registry, [key, {}].concat(__slice.call(args)));
    };

    createDeferredRequest = function() {
      var args, key, request;
      key = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      request = new Deferred();
      request.key = key;
      request.args = args;
      return request;
    };

    FreeMart.requestAsync = function() {
      var args, key, request, result;
      key = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      FreeMart.log("FreeMart.requestAsync(" + (toString.apply(null, [key].concat(__slice.call(args)))) + ")");
      result = registry.process.apply(registry, [key, {
        async: true
      }].concat(__slice.call(args)));
      if (result === NO_PROVIDER) {
        request = createDeferredRequest.apply(null, [key].concat(__slice.call(args)));
        queues[key] || (queues[key] = []);
        queues[key].push(request);
        return request;
      } else if (result === NOT_FOUND) {
        throw "NOT FOUND: " + key;
      } else {
        return result;
      }
    };

    FreeMart.requestMulti = function() {
      var keyAndArg, keyAndArgs, _i, _len, _results;
      keyAndArgs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      FreeMart.log("FreeMart.requestMulti(" + (toString(keyAndArgs)) + ")");
      _results = [];
      for (_i = 0, _len = keyAndArgs.length; _i < _len; _i++) {
        keyAndArg = keyAndArgs[_i];
        if (typeof keyAndArg === 'object' && keyAndArg.length) {
          _results.push(this.request.apply(this, keyAndArg));
        } else {
          _results.push(this.request(keyAndArg));
        }
      }
      return _results;
    };

    FreeMart.requestAsyncMulti = function() {
      var keyAndArg, keyAndArgs, requests;
      keyAndArgs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      FreeMart.log("FreeMart.requestAsyncMulti(" + (toString(keyAndArgs)) + ")");
      requests = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = keyAndArgs.length; _i < _len; _i++) {
          keyAndArg = keyAndArgs[_i];
          if (typeof keyAndArg === 'object' && keyAndArg.length) {
            _results.push(this.requestAsync.apply(this, keyAndArg));
          } else {
            _results.push(this.requestAsync(keyAndArg));
          }
        }
        return _results;
      }).call(this);
      return Deferred.when.apply(Deferred, requests);
    };

    FreeMart.requestAll = function() {
      var args, key;
      key = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      FreeMart.log("FreeMart.requestAll(" + (toString.apply(null, [key].concat(__slice.call(args)))) + ")");
      return registry.process.apply(registry, [key, {
        all: true
      }].concat(__slice.call(args)));
    };

    FreeMart.requestAllAsync = function() {
      var args, key, requests, result;
      key = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      FreeMart.log("FreeMart.requestAllAsync(" + (toString.apply(null, [key].concat(__slice.call(args)))) + ")");
      result = new Deferred();
      requests = registry.process.apply(registry, [key, {
        all: true,
        async: true
      }].concat(__slice.call(args)));
      Deferred.when.apply(Deferred, requests).then(function() {
        var results;
        results = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return result.resolve(results);
      });
      return result;
    };

    FreeMart.clear = function() {
      return registry.clear();
    };

    FreeMart.registry = registry;

    FreeMart.log = function() {};

    return FreeMart;

  })();

}).call(this);
