// Generated by CoffeeScript 1.4.0
(function() {
  var FuzzyRegistry, HashRegistry, InUse, NOT_FOUND, Provider, Registry, toString,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty;

  NOT_FOUND = {};

  toString = function(obj, options) {
    var result;
    if (options == null) {
      options = {};
    }
    result = JSON.stringify(obj).replace(/"/g, "'");
    if (options.strip_brackets && result[0] === '[') {
      result = result.substring(1, result.length - 1);
    }
    return result;
  };

  InUse = {
    process: function() {
      var args, key, options;
      key = arguments[0], options = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      try {
        this.in_use_keys << key;
        return this.process_.apply(this, [key, options].concat(__slice.call(args)));
      } finally {
        this.in_use_keys.splice(this.in_use_keys.indexOf(key), 1);
      }
    },
    processing: function(key) {
      return this.in_use_keys.indexOf(key) >= 0;
    }
  };

  Registry = (function() {

    function Registry() {
      this.storage = [];
    }

    Registry.prototype.clear = function() {
      return this.storage = [];
    };

    Registry.prototype.add = function(key, provider) {
      var child_registry, last;
      last = this.storage.length > 0 ? this.storage[this.storage.length - 1] : void 0;
      if (last instanceof HashRegistry && !last.accept(key)) {
        last[key] = provider;
      } else {
        if (typeof key === 'string') {
          child_registry = new HashRegistry();
          child_registry[key] = provider;
        } else {
          child_registry = new FuzzyRegistry(key, provider);
        }
        this.storage.push(child_registry);
      }
      return provider;
    };

    Registry.prototype.accept = function(key) {
      var item, _i, _len, _ref;
      _ref = this.storage;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (item.accept(key)) {
          return true;
        }
      }
    };

    Registry.prototype.process = function() {
      var args, i, item, key, options, result, _i, _ref;
      key = arguments[0], options = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      console.log("Registry.process(" + key + ")");
      for (i = _i = _ref = this.storage.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
        item = this.storage[0];
        if (item.processing(key)) {
          continue;
        }
        result = item.process.apply(item, [key, options].concat(__slice.call(args)));
        if (result !== NOT_FOUND) {
          return result;
        }
      }
      return NOT_FOUND;
    };

    return Registry;

  })();

  HashRegistry = (function() {
    var key, value;

    for (key in InUse) {
      if (!__hasProp.call(InUse, key)) continue;
      value = InUse[key];
      HashRegistry.prototype[key] = value;
    }

    function HashRegistry() {
      this.in_use_keys = [];
    }

    HashRegistry.prototype.accept = function(key) {
      return this[key];
    };

    HashRegistry.prototype.process_ = function() {
      var args, key, options, provider;
      key = arguments[0], options = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      provider = this[key];
      if (!provider) {
        return NOT_FOUND;
      }
      return provider.process.apply(provider, [options].concat(__slice.call(args)));
    };

    return HashRegistry;

  })();

  FuzzyRegistry = (function() {
    var key, value;

    for (key in InUse) {
      if (!__hasProp.call(InUse, key)) continue;
      value = InUse[key];
      FuzzyRegistry.prototype[key] = value;
    }

    function FuzzyRegistry(fuzzy_key, provider) {
      this.fuzzy_key = fuzzy_key;
      this.provider = provider;
      this.in_use_keys = [];
    }

    FuzzyRegistry.prototype.accept = function(key) {
      var item, _i, _len, _ref;
      if (this.fuzzy_key instanceof RegExp) {
        return this.fuzzy_key.match(key);
      } else if (this.fuzzy_key instanceof Array) {
        _ref = this.fuzzy_key;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          if (item instanceof String) {
            if (item === key) {
              return true;
            }
          } else {
            if (key.match(item)) {
              return true;
            }
          }
        }
      }
    };

    FuzzyRegistry.prototype.process_ = function() {
      var args, key, options, _ref;
      key = arguments[0], options = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      if (!this.accept(key)) {
        return NOT_FOUND;
      }
      return (_ref = this.provider).process.apply(_ref, [options].concat(__slice.call(args)));
    };

    return FuzzyRegistry;

  })();

  Provider = (function() {

    function Provider(key, value, options) {
      this.key = key;
      this.value = value;
      this.options = options;
      console.log('Provider.constructor');
    }

    Provider.prototype.process = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      console.log("Provider.process(" + (toString(args, {
        strip_brackets: true
      })) + ")");
      if (typeof this.value === 'function') {
        return this.value.apply(this, args);
      } else {
        return this.value;
      }
    };

    return Provider;

  })();

  window.FreeMart = (function() {
    var registry;

    function FreeMart() {}

    registry = new Registry();

    FreeMart.register = function(key, value) {
      return registry.add(key, new Provider(key, value));
    };

    FreeMart.request = function() {
      var args, key;
      key = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return registry.process.apply(registry, [key, {}].concat(__slice.call(args)));
    };

    FreeMart.requestAsync = function() {
      var args, key, result, value;
      key = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (registry.hasOwnProperty(key)) {
        value = registry[key];
        if (typeof value === 'function') {
          result = value.apply(null, args);
          if (typeof (result != null ? result.promise : void 0) === 'function') {
            return result;
          } else {
            return new Deferred().resolve(result);
          }
        } else if (typeof (value != null ? value.promise : void 0) === 'function') {
          return value;
        } else {
          return new Deferred().resolve(value);
        }
      }
    };

    FreeMart.clear = function() {
      return registry.clear();
    };

    FreeMart.registry = registry;

    return FreeMart;

  })();

}).call(this);
