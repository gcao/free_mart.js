// Generated by CoffeeScript 1.4.0
(function() {
  var __slice = [].slice;

  window.FreeMart = (function() {
    var providers, queues;

    function FreeMart() {}

    queues = {};

    providers = {};

    FreeMart.register = function(key, value) {
      var deferred, deferred2, item, queue, result, _i, _len, _results;
      providers[key] = value;
      if (queues.hasOwnProperty(key)) {
        queue = queues[key];
        delete queues[key];
        _results = [];
        for (_i = 0, _len = queue.length; _i < _len; _i++) {
          item = queue[_i];
          deferred = item.shift();
          if (typeof value === 'function') {
            result = value.apply(null, item);
            if (typeof (result != null ? result.promise : void 0) === 'function') {
              deferred2 = deferred;
              _results.push(result.done(function(newResult) {
                return deferred2.resolve(newResult);
              }));
            } else {
              _results.push(deferred.resolve(result));
            }
          } else if (typeof (value != null ? value.promise : void 0) === 'function') {
            _results.push(value.done(function(result) {
              return deferred.resolve(result);
            }));
          } else {
            _results.push(deferred.resolve(value));
          }
        }
        return _results;
      }
    };

    FreeMart.request = function() {
      var args, key, value;
      key = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      value = providers[key];
      if (typeof value === 'function') {
        return value.apply(null, args);
      } else {
        return value;
      }
    };

    FreeMart.requestAsync = function() {
      var args, deferred, key, result, value;
      key = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (providers.hasOwnProperty(key)) {
        value = providers[key];
        if (typeof value === 'function') {
          result = value.apply(null, args);
          if (typeof (result != null ? result.promise : void 0) === 'function') {
            return result;
          } else {
            return new Deferred().resolve(result);
          }
        } else if (typeof (value != null ? value.promise : void 0) === 'function') {
          return value;
        } else {
          return new Deferred().resolve(value);
        }
      } else {
        deferred = new Deferred();
        args.unshift(deferred);
        if (queues.hasOwnProperty(key)) {
          queues[key].push(args);
        } else {
          queues[key] = [args];
        }
        return deferred;
      }
    };

    FreeMart.clear = function() {
      return providers = {};
    };

    FreeMart.providers = providers;

    FreeMart.processValue = function() {
      var args, deferred, result, value;
      deferred = arguments[0], value = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      if (typeof value === 'function') {
        result = value.apply(null, args);
        if (typeof (result != null ? result.promise : void 0) === 'function') {
          return result;
        } else {
          return new Deferred().resolve(result);
        }
      } else if (typeof (value != null ? value.promise : void 0) === 'function') {
        return value;
      } else {
        return new Deferred().resolve(value);
      }
    };

    return FreeMart;

  })();

}).call(this);
