// Generated by CoffeeScript 1.4.0
(function() {
  var FuzzyRegistry, HashRegistry, InUse, Registry,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  InUse = {
    process: function() {
      var args, key, options;
      key = arguments[0], options = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      try {
        this.in_use_keys << key;
        return process_.apply(null, [key, options].concat(__slice.call(args)));
      } finally {
        this.in_use_keys.splice(this.in_use_keys.indexOf(key), 1);
      }
    },
    processing: function(key) {
      return this.in_use_keys.indexOf(key) >= 0;
    },
    in_use_keys: function() {
      return this.in_use || (this.in_use = []);
    }
  };

  Registry = (function(_super) {

    __extends(Registry, _super);

    function Registry() {
      return Registry.__super__.constructor.apply(this, arguments);
    }

    Registry.prototype.add = function(key, provider) {
      var child_registry;
      if (last instanceof HashRegistry && !last.accept(key)) {
        return last[key] = provider;
      } else {
        if (key instanceof String) {
          child_registry = new HashRegistry();
          child_registry[key] = provider;
        } else {
          child_registry = new FuzzyRegistry(key, provider);
        }
        return push(child_registry);
      }
    };

    Registry.prototype.accept = function(key) {
      var item, _i, _len;
      for (_i = 0, _len = this.length; _i < _len; _i++) {
        item = this[_i];
        if (item.accept(key)) {
          return true;
        }
      }
    };

    Registry.prototype.process = function() {
      var args, i, item, key, options, result, _i, _ref;
      key = arguments[0], options = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      for (i = _i = _ref = this.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
        item = this[0];
        if (item.processing(key)) {
          continue;
        }
        result = item.process.apply(item, [key, options].concat(__slice.call(args)));
        if (result !== NOT_FOUND) {
          return result;
        }
      }
      return NOT_FOUND;
    };

    return Registry;

  })(Array);

  HashRegistry = (function() {
    var key, value;

    function HashRegistry() {}

    for (key in InUse) {
      if (!__hasProp.call(InUse, key)) continue;
      value = InUse[key];
      HashRegistry[key] = value;
    }

    HashRegistry.prototype.accept = function(key) {
      return this[key];
    };

    HashRegistry.prototype.process_ = function() {
      var args, key, options, provider;
      key = arguments[0], options = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      provider = self[key];
      if (!provider) {
        return NOT_FOUND;
      }
      return provider.call.apply(provider, [options].concat(__slice.call(args)));
    };

    return HashRegistry;

  })();

  FuzzyRegistry = (function() {
    var key, value;

    for (key in InUse) {
      if (!__hasProp.call(InUse, key)) continue;
      value = InUse[key];
      FuzzyRegistry[key] = value;
    }

    function FuzzyRegistry(fuzzy_key, provider) {
      this.fuzzy_key = fuzzy_key;
      this.provider = provider;
    }

    FuzzyRegistry.prototype.accept = function(key) {
      var item, _i, _len, _ref;
      if (this.fuzzy_key instanceof RegExp) {
        return this.fuzzy_key.match(key);
      } else if (this.fuzzy_key instanceof Array) {
        _ref = this.fuzzy_key;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          if (item instanceof String) {
            if (item === key) {
              return true;
            }
          } else {
            if (key.match(item)) {
              return true;
            }
          }
        }
      }
    };

    FuzzyRegistry.prototype.process_ = function() {
      var args, key, options, _ref;
      key = arguments[0], options = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      if (!this.accept(key)) {
        return NOT_FOUND;
      }
      return (_ref = this.provider).process.apply(_ref, [options].concat(__slice.call(args)));
    };

    return FuzzyRegistry;

  })();

  window.FreeMart = (function() {
    var providers, queues;

    function FreeMart() {}

    queues = {};

    providers = {};

    FreeMart.register = function(key, value) {
      var deferred, deferred2, item, queue, result, _i, _len, _results;
      providers[key] = value;
      if (queues.hasOwnProperty(key)) {
        queue = queues[key];
        delete queues[key];
        _results = [];
        for (_i = 0, _len = queue.length; _i < _len; _i++) {
          item = queue[_i];
          deferred = item.shift();
          if (typeof value === 'function') {
            result = value.apply(null, item);
            if (typeof (result != null ? result.promise : void 0) === 'function') {
              deferred2 = deferred;
              _results.push(result.done(function(newResult) {
                return deferred2.resolve(newResult);
              }));
            } else {
              _results.push(deferred.resolve(result));
            }
          } else if (typeof (value != null ? value.promise : void 0) === 'function') {
            _results.push(value.done(function(result) {
              return deferred.resolve(result);
            }));
          } else {
            _results.push(deferred.resolve(value));
          }
        }
        return _results;
      }
    };

    FreeMart.request = function() {
      var args, key, value;
      key = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      value = providers[key];
      if (typeof value === 'function') {
        return value.apply(null, args);
      } else {
        return value;
      }
    };

    FreeMart.requestAsync = function() {
      var args, deferred, key, result, value;
      key = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (providers.hasOwnProperty(key)) {
        value = providers[key];
        if (typeof value === 'function') {
          result = value.apply(null, args);
          if (typeof (result != null ? result.promise : void 0) === 'function') {
            return result;
          } else {
            return new Deferred().resolve(result);
          }
        } else if (typeof (value != null ? value.promise : void 0) === 'function') {
          return value;
        } else {
          return new Deferred().resolve(value);
        }
      } else {
        deferred = new Deferred();
        args.unshift(deferred);
        if (queues.hasOwnProperty(key)) {
          queues[key].push(args);
        } else {
          queues[key] = [args];
        }
        return deferred;
      }
    };

    FreeMart.clear = function() {
      return providers = {};
    };

    FreeMart.providers = providers;

    return FreeMart;

  })();

}).call(this);
