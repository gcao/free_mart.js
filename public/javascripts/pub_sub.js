// Generated by CoffeeScript 1.7.1
(function() {
  var VERSION, create_arbiter;

  VERSION = "0.5.0";

  create_arbiter = function() {
    var id_lookup, new_id, persistent_messages, subscriptions, wildcard_subscriptions;
    subscriptions = {};
    wildcard_subscriptions = {};
    persistent_messages = {};
    id_lookup = {};
    new_id = 1;
    return {
      create: function() {
        return create_arbiter();
      },
      subscribe: function() {
        var context, func, i, id, j, messages, msg, options, persisted_subscription_list, priority, return_ids, subscription, subscription_list, wildcard;
        msg = void 0;
        messages = void 0;
        subscription_list = void 0;
        persisted_subscription_list = void 0;
        subscription = void 0;
        func = void 0;
        options = {};
        context = void 0;
        wildcard = false;
        priority = 0;
        id = void 0;
        return_ids = [];
        if (arguments_.length < 2) {
          return null;
        }
        messages = arguments_[0];
        func = arguments_[arguments_.length - 1];
        if (arguments_.length > 2) {
          options = arguments_[1] || {};
        }
        if (arguments_.length > 3) {
          context = arguments_[2];
        }
        if (options.priority) {
          priority = options.priority;
        }
        if (typeof messages === "string") {
          messages = messages.split(/[,\s]+/);
        }
        i = 0;
        while (i < messages.length) {
          msg = messages[i];
          if (/\*$/.test(msg)) {
            wildcard = true;
            msg = msg.replace(/\*$/, "");
            subscription_list = wildcard_subscriptions[msg];
            if (!subscription_list) {
              wildcard_subscriptions[msg] = subscription_list = [];
            }
          } else {
            subscription_list = subscriptions[msg];
            if (!subscription_list) {
              subscriptions[msg] = subscription_list = [];
            }
          }
          id = new_id++;
          subscription = {
            id: id,
            f: func,
            p: priority,
            self: context,
            options: options
          };
          id_lookup[id] = subscription;
          subscription_list.push(subscription);
          subscription_list = subscription_list.sort(function(a, b) {
            if (a.p > b.p) {
              return -1;
            } else {
              if (a.p === b.p) {
                return 0;
              } else {
                return 1;
              }
            }
          });
          if (wildcard) {
            wildcard_subscriptions[msg] = subscription_list;
          } else {
            subscriptions[msg] = subscription_list;
          }
          return_ids.push(id);
          if (!options.persist && persistent_messages[msg]) {
            persisted_subscription_list = persistent_messages[msg];
            j = 0;
            while (j < persisted_subscription_list.length) {
              subscription.f.call(subscription.self, persisted_subscription_list[j], {
                persist: true
              });
              j++;
            }
          }
          i++;
        }
        if (messages.length > 0) {
          return return_ids;
        }
        return return_ids[0];
      },
      publish: function(msg, data, options) {
        var async_timeout, cancelable, e, i, internal_data, overall_result, result, subscriber, subscription_list, wildcard_msg;
        async_timeout = 10;
        result = void 0;
        overall_result = true;
        cancelable = true;
        internal_data = {};
        subscriber = void 0;
        wildcard_msg = void 0;
        subscription_list = subscriptions[msg] || [];
        options = options || {};
        for (wildcard_msg in wildcard_subscriptions) {
          if (msg.indexOf(wildcard_msg) === 0) {
            subscription_list = subscription_list.concat(wildcard_subscriptions[wildcard_msg]);
          }
        }
        if (options.persist === true) {
          if (!persistent_messages[msg]) {
            persistent_messages[msg] = [];
          }
          persistent_messages[msg].push(data);
        }
        if (subscription_list.length === 0) {
          return overall_result;
        }
        if (typeof options.cancelable === "boolean") {
          cancelable = options.cancelable;
        }
        i = 0;
        while (i < subscription_list.length) {
          subscriber = subscription_list[i];
          if (subscriber.unsubscribed) {
            continue;
          }
          try {
            if (options.async === true || (subscriber.options && subscriber.options.async)) {
              setTimeout((function(inner_subscriber) {
                return function() {
                  inner_subscriber.f.call(inner_subscriber.self, data, msg, internal_data);
                };
              })(subscriber), async_timeout++);
            } else {
              result = subscriber.f.call(subscriber.self, data, msg, internal_data);
              if (cancelable && result === false) {
                break;
              }
            }
          } catch (_error) {
            e = _error;
            overall_result = false;
          }
          i++;
        }
        return overall_result;
      },
      unsubscribe: function(id) {
        if (id_lookup[id]) {
          id_lookup[id].unsubscribed = true;
          return true;
        }
        return false;
      }
    };
  };

  this.Arbiter = create_arbiter();

}).call(this);
