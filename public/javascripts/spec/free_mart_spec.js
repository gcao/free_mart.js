// Generated by CoffeeScript 1.4.0
(function() {

  chai.should();

  describe(FreeMart, function() {
    beforeEach(function() {
      return FreeMart.clear();
    });
    it("register/request should work", function() {
      FreeMart.register('key', 'value');
      return FreeMart.request('key').should.equal('value');
    });
    it("register/request should invoke function with arguments", function() {
      FreeMart.register('key', function(_, arg1, arg2) {
        return "value " + arg1 + " " + arg2;
      });
      return FreeMart.request('key', 'a', 'b').should.equal('value a b');
    });
    it("requestAsync should work with simple value", function() {
      var result;
      FreeMart.register('key', 'value');
      result = null;
      FreeMart.requestAsync('key').then(function(value) {
        return result = value;
      });
      return result.should.equal('value');
    });
    it("requestAsync should work with functions", function() {
      var result;
      FreeMart.register('key', function() {
        return 'value';
      });
      result = null;
      FreeMart.requestAsync('key').then(function(value) {
        return result = value;
      });
      return result.should.equal('value');
    });
    it("requestAsync should work with promises", function() {
      var deferred, result;
      deferred = new Deferred();
      FreeMart.register('key', deferred);
      result = null;
      FreeMart.requestAsync('key').then(function(value) {
        return result = value;
      });
      deferred.resolve('value');
      return result.should.equal('value');
    });
    it("requestAsync should work if provider is registered later", function() {
      var result;
      result = null;
      FreeMart.requestAsync('key').then(function(value) {
        return result = value;
      });
      FreeMart.register('key', 'value');
      return result.should.equal('value');
    });
    it("requestAsync should work if provider is a function and is registered later", function() {
      var result;
      result = null;
      FreeMart.requestAsync('key').then(function(value) {
        return result = value;
      });
      FreeMart.register('key', function() {
        return 'value';
      });
      return result.should.equal('value');
    });
    it("requestAsync should work if provider is a deferred object and is registered later", function() {
      var deferred, result;
      result = null;
      FreeMart.requestAsync('key').then(function(value) {
        return result = value;
      });
      deferred = new Deferred();
      FreeMart.register('key', deferred);
      deferred.resolve('value');
      return result.should.equal('value');
    });
    return it("multiple requestAsync should work if provider is registered later", function() {
      var deferredA, requestA, resultA, resultB, resultC;
      resultA = null;
      deferredA = new Deferred();
      requestA = FreeMart.requestAsync('key', deferredA).then(function(value) {
        return resultA = value;
      });
      resultB = null;
      FreeMart.requestAsync('key', 'b').then(function(value) {
        return resultB = value;
      });
      FreeMart.register('key', function(_, arg) {
        return arg;
      });
      resultC = null;
      FreeMart.requestAsync('key', 'c').then(function(value) {
        return resultC = value;
      });
      deferredA.resolve('a');
      resultA.should.equal('a');
      resultB.should.equal('b');
      return resultC.should.equal('c');
    });
  });

}).call(this);
